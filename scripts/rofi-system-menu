#!/usr/bin/env bash
# Rofi System Menu - Inspired by Omarchy Walker
# Comprehensive system management through Rofi

set -euo pipefail

# Set PATH to include common directories
export PATH="/usr/local/bin:/usr/bin:/bin:$PATH"

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"

# Removed rofi styling variables - using default theme

# Color variables for notifications
declare -r SUCCESS_COLOR="#66800B"
declare -r ERROR_COLOR="#AF3029"
declare -r INFO_COLOR="#4385BE"

notify_success() {
    notify-send -u normal "System Menu" "$1"
}

notify_error() {
    notify-send -u critical "System Menu" "$1"
}

notify_info() {
    notify-send -u low "System Menu" "$1"
}

show_main_menu() {
    echo "Appearance & Theming"
    echo "System Settings"
    echo "Power Management"
    echo "Applications"
    echo "Development Tools"
    echo "System Information"
    echo "Security & Privacy"
    echo "Network & Connectivity"
    echo "File Management" 
    echo "Help & About"
}

show_appearance_menu() {
    echo "Wallpaper Selector"
    echo "Flexoki Theme Settings"
    echo "Font Configuration"
    echo "Display Settings"
    echo "Icon Themes"
    echo "Color Picker"
    echo "Back to Main Menu"
}

show_system_menu() {
    echo "Audio Settings"
    echo "Bluetooth Management"
    echo "Network Configuration"
    echo "Keyboard & Input"
    echo "Mouse & Touchpad"
    echo "Date & Time"
    echo "Locale & Language"
    echo "Back to Main Menu"
}

show_power_menu() {
    echo "Lock Screen"
    echo "Suspend"
    echo "Restart"
    echo "Shutdown"
    echo "Log Out"
    echo "Power Profile"
    echo "Back to Main Menu"
}

show_apps_menu() {
    echo "Text Editors"
    echo "Web Browsers"
    echo "File Managers"
    echo "Media Players"
    echo "Communication"
    echo "Games"
    echo "Graphics & Photography"
    echo "Back to Main Menu"
}

show_dev_menu() {
    echo "Terminal"
    echo "Code Editors"
    echo "Package Manager"
    echo "Git Tools"
    echo "Docker"
    echo "Node.js Tools"
    echo "Python Tools"
    echo "Rust Tools"
    echo "Back to Main Menu"
}

show_info_menu() {
    echo "System Information"
    echo "Resource Monitor"
    echo "Temperature Monitor"
    echo "Disk Usage"
    echo "Hardware Info"
    echo "Network Status"
    echo "Clipboard History"
    echo "Back to Main Menu"
}

show_security_menu() {
    echo "SSH Key Management"
    echo "Password Manager"
    echo "Firewall Status"
    echo "Fail2ban Status"
    echo "Tailscale Status"
    echo "Security Scan"
    echo "Back to Main Menu"
}

show_network_menu() {
    echo "WiFi Networks"
    echo "Ethernet Settings"
    echo "DNS Configuration"
    echo "VPN Connections"
    echo "Port Scanner"
    echo "Network Monitor"
    echo "Back to Main Menu"
}

show_file_menu() {
    echo "File Manager (Yazi)"
    echo "File Search"
    echo "Recent Files"
    echo "Trash Management"
    echo "Disk Analyzer"
    echo "Sync & Backup"
    echo "Back to Main Menu"
}

# Appearance functions
handle_wallpaper() {
    "$SCRIPT_DIR/rofi-wallpaper"
}

handle_display_settings() {
    if command -v arandr >/dev/null 2>&1; then
        arandr &
    elif command -v xrandr >/dev/null 2>&1; then
        local output
        output=$(xrandr --listmonitors | rofi -dmenu -p "Select display:")
        if [ -n "$output" ]; then
            notify_info "Display configuration options would go here"
        fi
    else
        notify_error "No display configuration tool found"
    fi
}

handle_color_picker() {
    if command -v hyprpicker >/dev/null 2>&1; then
        local color
        color=$(hyprpicker -a)
        notify_success "Color copied to clipboard: $color"
    elif command -v gcolor3 >/dev/null 2>&1; then
        gcolor3 &
    else
        notify_error "No color picker found. Install hyprpicker or gcolor3"
    fi
}

# Power functions
handle_lock() {
    if command -v hyprlock >/dev/null 2>&1; then
        hyprlock
    else
        notify_error "hyprlock not found"
    fi
}

handle_suspend() {
    local confirm
    confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Suspend system?")
    if [ "$confirm" = "Yes" ]; then
        systemctl suspend
    fi
}

handle_restart() {
    local confirm
    confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Restart system?")
    if [ "$confirm" = "Yes" ]; then
        systemctl reboot
    fi
}

handle_shutdown() {
    local confirm
    confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Shutdown system?")
    if [ "$confirm" = "Yes" ]; then
        systemctl poweroff
    fi
}

handle_logout() {
    local confirm
    confirm=$(echo -e "Yes\nNo" | rofi -dmenu -p "Log out?")
    if [ "$confirm" = "Yes" ]; then
        hyprctl dispatch exit
    fi
}

# System info functions
handle_system_info() {
    if command -v fastfetch >/dev/null 2>&1; then
        alacritty -e fastfetch &
    elif command -v neofetch >/dev/null 2>&1; then
        alacritty -e neofetch &
    else
        notify_error "No system info tool found"
    fi
}

handle_resource_monitor() {
    if command -v btop >/dev/null 2>&1; then
        alacritty -e btop &
    elif command -v htop >/dev/null 2>&1; then
        alacritty -e htop &
    else
        notify_error "No system monitor found"
    fi
}

handle_disk_usage() {
    if command -v duf >/dev/null 2>&1; then
        alacritty -e duf &
    elif command -v df >/dev/null 2>&1; then
        alacritty -e df -h &
    else
        notify_error "No disk usage tool found"
    fi
}

# Network functions
handle_wifi() {
    if command -v nmtui >/dev/null 2>&1; then
        alacritty -e nmtui &
    else
        notify_error "NetworkManager TUI not found"
    fi
}

handle_tailscale_status() {
    if command -v tailscale >/dev/null 2>&1; then
        local status
        status=$(tailscale status 2>/dev/null || echo "Tailscale not connected")
        echo "$status" | rofi -dmenu -p "Tailscale Status:"
    else
        notify_error "Tailscale not installed"
    fi
}

# File management functions
handle_file_manager() {
    alacritty -e yazi &
}

handle_file_search() {
    if command -v fd >/dev/null 2>&1; then
        local query
        query=$(rofi -dmenu -p "Search for file:")
        if [ -n "$query" ]; then
            local result
            result=$(fd "$query" ~ | head -20 | rofi -dmenu -p "Select file:")
            if [ -n "$result" ] && [ -f "$result" ]; then
                xdg-open "$result" &
            fi
        fi
    else
        notify_error "fd (file finder) not installed"
    fi
}

# Main menu handler
handle_menu_choice() {
    local choice="$1"
    case "$choice" in
        "Appearance & Theming")
            local subchoice
            subchoice=$(show_appearance_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "Appearance:")
            case "$subchoice" in
                "Wallpaper Selector") handle_wallpaper ;;
                "Display Settings") handle_display_settings ;;
                "Color Picker") handle_color_picker ;;
                "Back to Main Menu") main ;;
            esac
            ;;
        "Power Management")
            local subchoice
            subchoice=$(show_power_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "Power:")
            case "$subchoice" in
                "Lock Screen") handle_lock ;;
                "Suspend") handle_suspend ;;
                "Restart") handle_restart ;;
                "Shutdown") handle_shutdown ;;
                "Log Out") handle_logout ;;
                "Back to Main Menu") main ;;
            esac
            ;;
        "System Information")
            local subchoice
            subchoice=$(show_info_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "System Info:")
            case "$subchoice" in
                "System Information") handle_system_info ;;
                "Resource Monitor") handle_resource_monitor ;;
                "Disk Usage") handle_disk_usage ;;
                "Back to Main Menu") main ;;
            esac
            ;;
        "Network & Connectivity")
            local subchoice
            subchoice=$(show_network_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "Network:")
            case "$subchoice" in
                "WiFi Networks") handle_wifi ;;
                "Tailscale Status") handle_tailscale_status ;;
                "Back to Main Menu") main ;;
            esac
            ;;
        "File Management")
            local subchoice
            subchoice=$(show_file_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "Files:")
            case "$subchoice" in
                "File Manager (Yazi)") handle_file_manager ;;
                "File Search") handle_file_search ;;
                "Back to Main Menu") main ;;
            esac
            ;;
        "Help & About")
            echo -e "System Menu v1.0\nRofi-based system management\nInspired by Omarchy Walker\n\nKeybinds:\nSuper+D - App Launcher\nSuper+Alt+Space - System Menu" | \
                rofi -dmenu -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "About:"
            ;;
    esac
}

main() {
    local choice
    choice=$(show_main_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "System Menu:")
    
    if [ -n "$choice" ]; then
        handle_menu_choice "$choice"
    fi
}

# Handle command line arguments
case "${1:-}" in
    --wallpaper)
        handle_wallpaper
        ;;
    --power)
        show_power_menu | rofi -dmenu -i -theme ~/.config/rofi/themes/flexoki-dark.rasi -p "Power:"
        ;;
    *)
        main
        ;;
esac